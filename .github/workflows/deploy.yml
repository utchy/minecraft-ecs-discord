name: Deploy Minecraft Server Infrastructure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: minecraft-ecs-discord
  TERRAFORM_VERSION: 1.0.0

jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repositories if they don't exist
        run: |
          for repo in mod-sync backup discord-bot auto-shutdown; do
            aws ecr describe-repositories --repository-names ${PROJECT_NAME}-${repo} || \
            aws ecr create-repository --repository-name ${PROJECT_NAME}-${repo}
          done

      - name: Build and push mod-sync image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${ECR_REGISTRY}/${PROJECT_NAME}-mod-sync:latest ./docker/mod_sync
          docker push ${ECR_REGISTRY}/${PROJECT_NAME}-mod-sync:latest

      - name: Build and push backup image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${ECR_REGISTRY}/${PROJECT_NAME}-backup:latest ./docker/backup
          docker push ${ECR_REGISTRY}/${PROJECT_NAME}-backup:latest

      - name: Build and push discord-bot image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${ECR_REGISTRY}/${PROJECT_NAME}-discord-bot:latest ./docker/discord_bot
          docker push ${ECR_REGISTRY}/${PROJECT_NAME}-discord-bot:latest

      - name: Build and push auto-shutdown image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${ECR_REGISTRY}/${PROJECT_NAME}-auto-shutdown:latest ./docker/lambda
          docker push ${ECR_REGISTRY}/${PROJECT_NAME}-auto-shutdown:latest

  deploy-infrastructure:
    name: Deploy Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create S3 bucket for Terraform state if it doesn't exist
        run: |
          aws s3api head-bucket --bucket ${PROJECT_NAME}-tfstate 2>/dev/null || \
          aws s3 mb s3://${PROJECT_NAME}-tfstate

      - name: Create DynamoDB table for Terraform state locking if it doesn't exist
        run: |
          aws dynamodb describe-table --table-name ${PROJECT_NAME}-tfstate-lock 2>/dev/null || \
          aws dynamodb create-table \
            --table-name ${PROJECT_NAME}-tfstate-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

  update-discord-bot-token:
    name: Update Discord Bot Token
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Discord Bot Token in SSM Parameter Store
        run: |
          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/discord-bot-token" \
            --value "${{ secrets.DISCORD_BOT_TOKEN }}" \
            --type "SecureString" \
            --overwrite

      - name: Update Discord Channel ID in SSM Parameter Store
        run: |
          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/discord-channel-id" \
            --value "${{ secrets.DISCORD_CHANNEL_ID }}" \
            --type "String" \
            --overwrite